buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/libs-release'}
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.2'
    }
}

configure(allprojects) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
	
	sourceCompatibility = 1.6
    targetCompatibility = 1.6

    group = 'org.springframework.yarn'
	
    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

    repositories {
		mavenCentral()
        maven { url "http://repo.springsource.org/libs-release" }
		mavenLocal()
    }

	task integrationTest(type: Test) {
		include '**/*IntegrationTests.*'
	}

	test {
		exclude '**/*IntegrationTests.*'
	}
    
    // servlet-api (2.5) and tomcat-servlet-api (3.0) classpath entries should not be
    // exported to dependent projects in Eclipse to avoid false compilation errors due
    // to changing APIs across these versions
    eclipse.classpath.file.whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.path.contains('servlet-api') }*.exported = false
    }
}

configure(subprojects) { subproject ->
    apply from: "${rootProject.projectDir}/publish-maven.gradle"

    jar {
        manifest.attributes['Implementation-Title'] = subproject.name
        manifest.attributes['Implementation-Version'] = subproject.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    }
	
    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project('spring-yarn-core') {
    description = "Spring YARN Core"
    
    dependencies {
        compile ("org.apache.hadoop:hadoop-yarn-api:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-yarn-common:$hadoopVersion") {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-yarn-client:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-common:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
		
		
		compile "org.springframework:spring-context-support:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		
		testCompile project(":spring-yarn-test")
        testCompile "commons-daemon:commons-daemon:1.0.10"		
        testCompile "org.apache.hadoop:hadoop-hdfs:$hadoopVersion"		
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"		
		testCompile "junit:junit:$junitVersion"
		testCompile "org.springframework:spring-test:$springVersion"
    }
}

project('spring-yarn-integration') {

    description = "Spring YARN integration"
	
    dependencies {		
		compile project(":spring-yarn-core")
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-ip:$springIntegrationVersion"
		compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
		compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
		//testCompile project(":spring-yarn-core").sourceSets.test.output
		testCompile project(":spring-yarn-test")
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"		
		testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
		testCompile "junit:junit:$junitVersion"
		testCompile "org.springframework:spring-test:$springVersion"
    }
}

project('spring-yarn-batch') {

    description = "Spring YARN batch"
    
    dependencies {		
		compile project(":spring-yarn-core")
		compile project(":spring-yarn-integration")
        compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
        compile "org.springframework.batch:spring-batch-infrastructure:$springBatchVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		testCompile project(":spring-yarn-test")
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"		
		testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
		testCompile "junit:junit:$junitVersion"
		testCompile "org.springframework:spring-test:$springVersion"
        testCompile "org.springframework.data:spring-data-hadoop:1.0.0.RELEASE"
		testRuntime ("io.netty:netty:3.5.9.Final") {
			exclude group: 'org.jboss.netty'
		}
    }
}

project('spring-yarn-test') {

    description = "Spring YARN test"
    
    dependencies {
        compile ("org.apache.hadoop:hadoop-yarn-api:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-yarn-common:$hadoopVersion") {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-yarn-client:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-common:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-yarn-server-common:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-yarn-server-nodemanager:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
        compile ("org.apache.hadoop:hadoop-yarn-server-resourcemanager:$hadoopVersion")  {
			exclude group: 'org.jboss.netty'
		}
		compile "org.springframework:spring-test:$springVersion"
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"		
		testCompile "junit:junit:$junitVersion"
    }
	
}

configure(rootProject) {
    description = 'Spring for Hadoop YARN'

    apply plugin: 'docbook-reference'

    reference {
        sourceDir = file('src/reference/docbook')
    }

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    dependencies { // for integration tests
    }
    
    task api(type: Javadoc) {
        group = 'Documentation'
        description = 'Generates aggregated Javadoc API documentation.'
        title = "${rootProject.description} ${version} API"
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.overview = 'src/api/overview.html'
        options.links(
            'http://docs.jboss.org/jbossas/javadoc/4.0.5/connector'
        )
        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }
        destinationDir = new File(buildDir, "api")
        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })
        maxMemory = '1024m'
    }

    task docsZip(type: Zip) {
        group = 'Distribution'
        classifier = 'docs'
        description = "Builds -${classifier} archive containing api and reference " +
            "for deployment at static.springframework.org/spring-android/docs."

        from('src/dist') {
            include 'changelog.txt'
        }

        from (api) {
            into 'api'
        }

        //from (reference) {
        //    into 'reference'
        //}
    }

    task distZip(type: Zip, dependsOn: docsZip) {
        group = 'Distribution'
        classifier = 'dist'
        description = "Builds -${classifier} archive, containing all jars and docs, " +
                      "suitable for community download page."

        def baseDir = "${project.name}-${project.version}";

        from('src/dist') {
            include 'readme.txt'
            include 'license.txt'
            include 'notice.txt'
            into "${baseDir}"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }

        from(zipTree(docsZip.archivePath)) {
            into "${baseDir}/docs"
        }

        subprojects.each { subproject ->
            into ("${baseDir}/libs") {
                from subproject.jar
                if (subproject.tasks.findByPath('sourcesJar')) {
                    from subproject.sourcesJar
                }
                if (subproject.tasks.findByPath('javadocJar')) {
                    from subproject.javadocJar
                }
            }
        }
    }

    artifacts {
        archives docsZip
        archives distZip
    }

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '1.3'
    }

}

task updateRootDocs << {
    copy {
        from 'src/dist'
        into "${rootProject.projectDir}"
        include 'notice.txt'
        expand(copyright: new Date().format('yyyy'), version: project.version)
        rename { filename -> 'NOTICE' }
    }

    copy {
        from 'src/dist'
        into "${rootProject.projectDir}"
        include 'license.txt'
        rename { filename -> 'LICENSE' }
    }
}

build.dependsOn('updateRootDocs')
