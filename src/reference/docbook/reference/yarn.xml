<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="yarn">
  
  <title>Yarn Configuration</title>

  <para>One of the common tasks when using Hadoop is interacting with its
  <emphasis>runtime</emphasis> - whether it is a local setup or a remote
  cluster, one needs to properly configure and bootstrap Hadoop in
  order to submit the applications.</para>
  
  <section id="yarn:ns">
  	<title>Using the Spring for Apache Yarn Namespace</title>  	

  	<para>To simplify configuration, SYARN provides a dedicated namespace for
	most of its components. However, one can opt to configure the beans
  	directly through the usual <literal>&lt;bean&gt;</literal> definition.
	For more information about XML Schema-based configuration in Spring, see 
  	<ulink url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/xsd-config.html">this</ulink>
	appendix in the Spring Framework reference documentation.</para>
  	
  	<para>To use the SYARN namespace, one just needs to import
	it inside the configuration:</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:]]><co id="yarn-ns-prefix"/><![CDATA[yarn="]]><co id="yarn-ns-uri"/><![CDATA[http://www.springframework.org/schema/yarn"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd]]><co id="yarn-ns-uri-loc"/><![CDATA[">

  <bean id ... >

  ]]><co id="yarn-ns-example"/><![CDATA[<yarn:configuration ...>
</beans>]]></programlisting>

    <calloutlist>
      <callout arearefs="yarn-ns-prefix">
        <para>Spring for Apache Hadoop Yarn namespace prefix. Any name can do but
		through out the reference documentation, the <literal>yarn</literal>
		will be used.</para>
      </callout>
      <callout arearefs="yarn-ns-uri">
        <para>The namespace URI.</para>
      </callout>
      <callout arearefs="yarn-ns-uri-loc">
        <para>The namespace URI location. Note that even though the location
		points to an external address (which exists and is valid), Spring
		will resolve the schema locally as it is included in the Spring
		for Apache Hadoop Yarn library.</para>
      </callout>
      <callout arearefs="yarn-ns-example">
        <para>Declaration example for the Yarn namespace.
		Notice the prefix usage.</para>
      </callout>
    </calloutlist>
 	
 	<para>Once declared, the namespace elements can be declared simply by
	appending the aforementioned prefix. Note that is possible to change
	the default namespace, for example from <literal>&lt;beans&gt;</literal>
	to <literal>&lt;yarn&gt;</literal>. This is useful for configuration
	composed mainly of Hadoop components as it avoids declaring the prefix.
	To achieve this, simply swap the namespace prefix declaration above:</para>
    
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/yarn"]]><co id="yarn-def-ns-prefix"/><![CDATA[
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  ]]><co id="yarn-def-ns-beans-prefix"/><![CDATA[xmlns:beans="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd">
	    
    ]]><co id="yarn-def-ns-beans-example"/><![CDATA[<beans:bean id ... >
	
    ]]><co id="yarn-def-ns-yarn-example"/><![CDATA[<configuration ...>
	
</beans:beans>]]></programlisting>

    <calloutlist>
      <callout arearefs="yarn-def-ns-prefix">
        <para>The default namespace declaration for this XML file points
		to the Spring for Apache Yarn namespace.</para>
      </callout>
      <callout arearefs="yarn-def-ns-beans-prefix">
        <para>The beans namespace prefix declaration.</para>
      </callout>
      <callout arearefs="yarn-def-ns-beans-example">
        <para>Bean declaration using the <literal>&lt;beans&gt;</literal>
		namespace. Notice the prefix.</para>
      </callout>
      <callout arearefs="yarn-def-ns-yarn-example">
        <para>Bean declaration using the <literal>&lt;yarn&gt;</literal>
		namespace. Notice the <emphasis>lack</emphasis> of prefix
		(as <literal>yarn</literal> is the default namespace).</para>
      </callout>
    </calloutlist>
 		
    <para>For the remainder of this doc, to improve readability, the XML
	examples will simply refer to the <literal>&lt;yarn&gt;</literal> namespace
 	without the namespace declaration, where possible.</para>	
	
  </section>

  <section id="yarn:config">
  
    <title>Configuring Yarn</title>
	
    <para>In order to use Hadoop and Yarn, one needs to first configure it namely by
	creating a <literal>YarnConfiguration</literal> object. The configuration holds
	information about the various parameters of the Yarn system.</para>
   	 
   	<para>In its simplest form, the configuration definition is a one liner:</para>
   	 
   	<programlisting language="xml"><![CDATA[<yarn:configuration />]]></programlisting>
   	 
   	<para>The declaration above defines a <classname>YarnConfiguration</classname>
	bean (to be precise a factory bean of type <classname>ConfigurationFactoryBean</classname>)
	named, by default, <literal>yarnConfiguration</literal>. The default name
	is used, by conventions, by the other elements that require
	a configuration - this leads to simple and very concise configurations as the 
   	main components can automatically wire themselves up without
	requiring any specific configuration.</para>
   	 
   	<para>For scenarios where the defaults need to be tweaked, one
	can pass in additional configuration files:</para>
   	 
   	<programlisting language="xml"><![CDATA[<yarn:configuration resources="classpath:/custom-site.xml, classpath:/hq-site.xml">]]></programlisting>
   	 
   	<para>In this example, two additional Hadoop configuration
	resources are added to the configuration.</para>
   	 
    <note>
      <para>Note that the configuration makes use of Spring's <ulink
      url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/resources.html"><interfacename>Resource</interfacename></ulink>
      abstraction to locate the file. This allows various search patterns
	  to be used, depending on the running environment or the prefix
	  specified(if any) by the value - in this example the classpath is used.</para>
    </note>

    <para>In addition to referencing configuration resources, one can tweak
	Hadoop settings directly through Java <classname>Properties</classname>. 
    This can be quite handy when just a few options need to be changed:</para>
    
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:yarn="http://www.springframework.org/schema/yarn"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd">
        
  <yarn:configuration>
    fs.defaultFS=hdfs://localhost:9000
    hadoop.tmp.dir=/tmp/hadoop
    electric=sea
  </yarn:configuration>
</beans>]]></programlisting>

    <para>One can further customize the settings by avoiding the so
	called <emphasis>hard-coded</emphasis> values by externalizing them so they
	can be replaced at runtime, based on the existing
    environment without touching the configuration:</para>
     
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:yarn="http://www.springframework.org/schema/yarn"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd">
        
  <yarn:configuration>
    fs.defaultFS=${hd.fs}
    hadoop.tmp.dir=file://${java.io.tmpdir}
    hangar=${number:18}
  </yarn:configuration>
     
  <context:property-placeholder location="classpath:hadoop.properties" />     
</beans>]]></programlisting>
     
    <para>Through Spring's property placeholder <ulink url="http://static.springsource.org/spring/docs/3.0.x/reference/beans.html#beans-factory-placeholderconfigurer">support</ulink>, <ulink url="http://static.springsource.org/spring/docs/3.0.x/reference/expressions.html">SpEL</ulink> and the <ulink url="http://blog.springsource.com/2011/06/09/spring-framework-3-1-m2-released/">environment 
    abstraction</ulink> (available in Spring 3.1). one can externalize
	environment specific properties from the main code base easing the
	deployment across multiple machines. In the example above, the default
	file system is replaced based on the properties available in
	<literal>hadoop.properties</literal> while the temp dir is determined
	dynamically through <literal>SpEL</literal>. Both approaches offer a lot
	of flexbility in adapting to the running environment - in fact we use this
	approach extensivly in the Spring for Apache Hadoop test suite to cope with
	the differences between the different development boxes and the CI server.</para>
          
    <para>
      <anchor id="yarn:config:properties"/>
      Additionally, external <literal>Properties</literal> files can be loaded, <literal>Properties</literal> beans (typically declared through Spring's <literal>
      <ulink url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/xsd-config.html#xsd-config-body-schemas-util-properties">util</ulink></literal> namespace). 
      Along with the nested properties declaration, this allows customized configurations to be easily declared:
    </para>
     
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:yarn="http://www.springframework.org/schema/yarn"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd">

  <!-- merge the local properties, the props bean and the two properties files -->        
  <yarn:configuration properties-ref="props" properties-location="cfg-1.properties, cfg-2.properties">
    star=chasing
    captain=eo
  </yarn:configuration>
     
  <util:properties id="props" location="props.properties"/>     
</beans>]]></programlisting>
     
    <para>When merging several properties, ones defined locally win. In the example
	above the configuration properties are the primary source, followed by
	the <literal>props</literal> bean followed by the external properties
	file based on their defined order. While it's not typical for a configuration
	to refer to use so many properties, the example showcases the various options available.</para>
	
    <note>For more properties utilities, including using the System as a source or
	fallback, or control over the merging order, consider using Spring's <literal>
    <ulink url="http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/beans/factory/config/PropertiesFactoryBean.html">PropertiesFactoryBean</ulink></literal> (which is what Spring for
	Apache Hadoop Yarn and <literal>util:properties</literal> use underneath).</note>
     
    <para><anchor id="yarn:config:inherit"/>It is possible to create configuration
	based on existing ones - this allows one to create dedicated configurations, slightly
	different from the main ones, usable for certain jobs (such as streaming - more
	on that <link linkend="yarn:job:streaming">below</link>). Simply use
	the <literal>configuration-ref</literal> attribute to refer to
	the <emphasis>parent</emphasis> configuration - all its properties
	will be inherited and overridden as specified by the child:</para>

    <programlisting language="xml"><![CDATA[<!-- default name is 'yarnConfiguration' -->
<yarn:configuration>
  fs.defaultFS=${hd.fs}
  hadoop.tmp.dir=file://${java.io.tmpdir}
</yarn:configuration>
     
<yarn:configuration id="custom" configuration-ref="yarnConfiguration">
  fs.defaultFS=${custom.hd.fs}
</yarn:configuration>     

...
]]></programlisting>     

    <para>Make sure though you specify a different name since otherwise, since
	both definitions will have the same name, the Spring container will interpret
	this as being the same definition (and will usually consider the last one found).</para>
          
    <para>Last but not least a reminder that one can mix and match all these
	options to her preference. In general, consider externalizing configuration
	since it allows easier updates without interfering with the application
	configuration. When dealing with multiple, similar configuration use
	configuration <emphasis>composition</emphasis> as it tends to keep the
	definitions concise, in sync and easy to update.</para>
	
  </section>

  <section id="yarn:localresources">
  
    <title>Defining Local Resources</title>
	
    <para>When <emphasis>Application Master</emphasis> or any other
	<emphasis>Container</emphasis> is run in a hadoop cluster, usually there
	are dependencies to various files. These files needs to be localized into
	a running <emphasis>Container</emphasis>. Localization is
	a process where dependent files are copied into node's
	directory structure and thus can be used within the <emphasis>Container</emphasis>
	itself. Yarn itself tries to provide isolation in a way that multiple
	containers and applications would not clash.</para>

    <para>In order to use local resources, one needs to create an implementation
	of <interfacename>ResourceLocalizer</interfacename> interface. In its
	simplest form, resource localizer can be defined as:</para>

    <programlisting language="xml"><![CDATA[<localresources>
  <hdfs path="/path/in/hdfs/my.jar"/>
</localresources>
]]></programlisting>

    <para>The declaration above defines a <interfacename>ResourceLocalizer</interfacename>
	bean (to be precise a factory bean of type 
	<classname>LocalResourcesFactoryBean</classname>) named, by default,
	<emphasis>yarnLocalresources</emphasis>. The default name is used, by
	conventions, by the other elements that require a reference to a
	resource localizer. It's explained later how this reference
	is used when container launch context is defined.</para>

    <para>Behind the scenes it's not enough to simple have a reference
	to file in a hdfs file system. Yarn itself when localizing resources into
	container needs to do a consistency check for copied files. This is done
	by checking file size and timestamp. This information needs to passed
	to yarn together with a file path. Order to do this the one who
	defines these beans needs to ask this information from hdfs prior to
	sending out resouce localizer request.</para>

    <para>On default the hdfs base address is coming from a Yarn configuration and
	<interfacename>ResourceLocalizer</interfacename> bean will use configuration named
	<emphasis>yarnLocalresources</emphasis>. If there is a need to use something else
	than the default bean, <emphasis>configuration-ref</emphasis> parameter
	can be used to make a reference to other defined configurations.</para>
	
    <programlisting language="xml"><![CDATA[<localresources configuration-ref="yarnConfiguration">
  <hdfs path="/path/in/hdfs/my.jar"/>
</localresources>
]]></programlisting>     

    <para>For example, client defining a launch context for
	<emphasis>Application Master</emphasis> needs to access dependent hdfs entries. The one
	defining and using <interfacename>ResourceLocalizer</interfacename> bean
	may have a different hdfs address than the Node Manager preparing the
	Container. Effectively hdfs entry given to resource localizer needs to be
	accessed from a <emphasis>Node Manager</emphasis>.</para>
	
    <para>To overcome this problem, parameters <emphasis>local</emphasis> and
	<emphasis>remote</emphasis> can be used to define a different hdfs base entries.</para>
	
    <programlisting language="xml"><![CDATA[<localresources local="hdfs://0.0.0.0:9000" remote="hdfs://10.10.10.10:9000">
  <hdfs path="/app/multi-context/multi-context-1.0.0.M1.jar"/>
  <hdfs path="/app/spring-yarn-core-1.0.0.BUILD-SNAPSHOT.jar"/>
</localresources>
]]></programlisting>     

    <para>Yarn resource localizer is using additional parameters to define entry type
	and visibility. Usage is described below:</para>
	
    <programlisting language="xml"><![CDATA[<localresources>
  <hdfs path="/path/in/hdfs/my.jar" type="FILE" visibility="APPLICATION"/>
</localresources>
]]></programlisting>

    <table id="yarn:localresources:localresourcesflags" pgwide="1" align="center">
        <title><literal>localresources</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>configuration-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to configuration bean name, default is
					<emphasis>yarnConfiguration</emphasis></entry>
                </row>
                <row>
                    <entry><literal>local</literal></entry>
                    <entry>HDFS Base URL</entry>
                    <entry>Global default if not defined in entry level</entry>
                </row>
                <row>
                    <entry><literal>remote</literal></entry>
                    <entry>HDFS Base URL</entry>
                    <entry>Global default if not defined in entry level</entry>
                </row>
                <row>
                    <entry><literal>type</literal></entry>
                    <entry><literal>ARCHIVE</literal>, <literal>FILE</literal>, <literal>PATTERN</literal></entry>
                    <entry>Global default if not defined in entry level</entry>
                </row>
                <row>
                    <entry><literal>visibility</literal></entry>
                    <entry><literal>PUBLIC</literal>, <literal>PRIVATE</literal>, <literal>APPLICATION</literal></entry>
                    <entry>Global default if not defined in entry level</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:localresources:hdfsflags" pgwide="1" align="center">
        <title><literal>hdfs</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>path</literal></entry>
                    <entry>HDFS Path</entry>
                    <entry>Path in hdfs</entry>
                </row>
                <row>
                    <entry><literal>local</literal></entry>
                    <entry>HDFS Base URL</entry>
                    <entry>Path accessible by a running container</entry>
                </row>
                <row>
                    <entry><literal>remote</literal></entry>
                    <entry>HDFS Base URL</entry>
                    <entry>Path accessible by a client</entry>
                </row>
                <row>
                    <entry><literal>type</literal></entry>
                    <entry><literal>ARCHIVE</literal>, <literal>FILE</literal>(default), <literal>PATTERN</literal></entry>
                    <entry><literal>ARCHIVE</literal> - automatically unarchived by the Node Manager, <literal>FILE</literal> - regular file, <literal>PATTERN</literal> - hybrid between archive and file.</entry>
                </row>
                <row>
                    <entry><literal>visibility</literal></entry>
                    <entry><literal>PUBLIC</literal>, <literal>PRIVATE</literal>, <literal>APPLICATION</literal>(default)</entry>
                    <entry><literal>PUBLIC</literal> - Shared by all users on the node, <literal>PRIVATE</literal> - Shared among all applications of the <emphasis>same user</emphasis> on the node, <literal>APPLICATION</literal> - Shared only among containers of the <emphasis>same application</emphasis> on the node</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>
	
  </section>

  <section id="yarn:containerenvironment">
    <title>Defining Container Environment</title>

    <para>One central concept in Yarn is to use environment variables
	which then can be read from a container. While it's possible to
	read those variable at any time it is considered bad design if
	one chooce to do so. Spring Yarn will pass variable into application
	before any business methods are executed, which makes things more
	clearly and testing becomes much more easier.</para>
	
    <programlisting language="xml"><![CDATA[<yarn:environment/>]]></programlisting>	
	
    <para>The declaration above defines a <interfacename>Map</interfacename>
	bean (to be precise a factory bean of type 
	<classname>EnvironmentFactoryBean</classname>) named, by default,
	<emphasis>yarnEnvironment</emphasis>. The default name is used, by
	conventions, by the other elements that require a reference to a
	environment variables.</para>	

    <para>For conveniance it is possible to define a classpath
	entry directly into an environment. Most likely one is about
	to run some java code with libraries so classpath needs to
	be defined anyway.</para>
	
    <programlisting language="xml"><![CDATA[<environment include-system-env="false">
  <classpath default-yarn-app-classpath="true" delimiter=":">
    ./*
  </classpath>
</environment>]]></programlisting>     
	
    <para>If <emphasis>default-yarn-app-classpath</emphasis> parameter is set to
    <emphasis>true</emphasis>(default value) a default yarn entries will be added to classpath
	automatically. Resulting entries are shown below:</para>

    <programlisting language="xml"><![CDATA[$HADOOP_CONF_DIR:
$HADOOP_COMMON_HOME/share/hadoop/common/*:
$HADOOP_COMMON_HOME/share/hadoop/common/lib/*:
$HADOOP_HDFS_HOME/share/hadoop/hdfs/*:
$HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*:
$HADOOP_YARN_HOME/share/hadoop/yarn/*:
$HADOOP_YARN_HOME/share/hadoop/yarn/lib/*]]></programlisting>	
	
    <note>
      <para>Be carefull if passing environment variables between different systems.
	  For example if running a client on Windows and passing variables to
	  Application Master running on Linux, execution wrapper in Yarn may
	  silently fail.</para>
    </note>
	
    <table id="yarn:environment:environmentflags" pgwide="1" align="center">
        <title><literal>environment</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>include-system-env</literal></entry>
                    <entry><literal>true</literal>(default), <literal>false</literal></entry>
                    <entry>Defines whether system environment variables are
					actually added to this bean.</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>
	
    <table id="yarn:environment:classpathflags" pgwide="1" align="center">
        <title><literal>classpath</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>default-yarn-app-classpath</literal></entry>
                    <entry><literal>true</literal>(default), <literal>false</literal></entry>
                    <entry>Defines whether default yarn entries are added
					to classpath.</entry>
                </row>
                <row>
                    <entry><literal>delimiter</literal></entry>
                    <entry>Delimiter string, default is ":"</entry>
                    <entry>Defines delimiter used in a classpath string</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>
	
	
  </section>

  <section id="yarn:client">
  
    <title>Defining Application Client</title>
	
  	<para>Client is always your entry point when interacting with
	a Yarn system whether one is about to submit a new application
	instance or just querying <emphasis>Resource Manager</emphasis>
	for running application(s) status.
	Currently support for client is very limited and a simple
	command to start <emphasis>Application Master</emphasis>
	can be defined. If there is just a need to query
	<emphasis>Resource Manager</emphasis>, command
	definition is not needed.</para>
	
    <programlisting language="xml"><![CDATA[<client>
  <master-command>
    <![CDATA[
      /usr/local/java/bin/java
      org.springframework.yarn.am.CommandLineAppmasterRunner
      appmaster-context.xml
      yarnAppmaster
      container-count=2
      1><LOG_DIR>/AppMaster.stdout
      2><LOG_DIR>/AppMaster.stderr
    ]]]]><![CDATA[>
  </master-command>
</client>]]></programlisting>     

    <para>The declaration above defines a <interfacename>YarnClient</interfacename>
	bean (to be precise a factory bean of type 
	<classname>YarnClientFactoryBean</classname>) named, by default,
	<emphasis>yarnClient</emphasis>. It also defines a command launching
	an <emphasis>Application Master</emphasis> using
	<literal>&lt;master-command&gt;</literal> entry.</para>

    <table id="yarn:client:clientflags" pgwide="1" align="center">
        <title><literal>client</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>configuration-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to configuration bean name, default is
					<emphasis>yarnConfiguration</emphasis></entry>
                </row>
                <row>
                    <entry><literal>resourcelocalizer-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to resource localizer bean name, default is
					<emphasis>yarnLocalresources</emphasis></entry>
                </row>
                <row>
                    <entry><literal>environment-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to environment bean name, default is
					<emphasis>yarnEnvironment</emphasis></entry>
                </row>
                <row>
                    <entry><literal>template-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to a bean implementing
					<interfacename>ClientRmOperations</interfacename></entry>
                </row>
            </tbody>
        </tgroup>  
    </table>


		
  </section>

  <section id="yarn:master">
  
    <title>Defining Application Master</title>
	
  	<para>Application master is responsible for container allocation,
	launching and monitoring.</para>
	
    <programlisting language="xml"><![CDATA[<master>
  <container-command>
    <![CDATA[
      /usr/local/java/bin/java
      org.springframework.yarn.container.CommandLineContainerRunner
      container-context.xml
      1><LOG_DIR>/Container.stdout
      2><LOG_DIR>/Container.stderr
    ]]]]><![CDATA[>
  </container-command>
</master>
]]></programlisting>     

    <para>The declaration above defines a <interfacename>YarnAppmaster</interfacename>
	bean (to be precise a factory bean of type 
	<classname>AppmasterFactoryBean</classname>) named, by default,
	<emphasis>yarnAppmaster</emphasis>. It also defines a command launching
	a <emphasis>Container(s)</emphasis> using
	<literal>&lt;container-command&gt;</literal> entry.</para>
	
	<para>Currently there is a simple implementation of
	<classname>StaticAppmaster</classname> which is able to allocate and
	launch a number of containers. These containers are monitored
	by querying resource manager for container execution completion.</para>
	
    <table id="yarn:master:masterflags" pgwide="1" align="center">
        <title><literal>master</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>configuration-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to configuration bean name, default is
					<emphasis>yarnConfiguration</emphasis></entry>
                </row>
                <row>
                    <entry><literal>resourcelocalizer-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to resource localizer bean name, default is
					<emphasis>yarnLocalresources</emphasis></entry>
                </row>
                <row>
                    <entry><literal>environment-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to environment bean name, default is
					<emphasis>yarnEnvironment</emphasis></entry>
                </row>
            </tbody>
        </tgroup>  
    </table>
	
  </section>
  
</chapter>
